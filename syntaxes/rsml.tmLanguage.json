{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "rsml",

	"foldingStartMarker": "{",
	"foldingStopMarker": "}",

	"patterns": [
		{
			"include": "#scopes"
		}
	],
	"repository": {
		"data-types": {
			"patterns": [
				{
					"include": "#tuples"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#colors"
				},
				{
					"include": "#enums"
				},
				{
					"include": "#asset_urls"
				},
				{
					"include": "#booleans"
				},
				{
					"include": "#nil"
				}
			]
		},

		"scopes_no_selectors_and_properties": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#macros"
				},
				{
					"include": "#static-arg"
				},
				{
					"include": "#macro-call"
				},
				{
					"include": "#declarations"
				},
				{
					"include": "#data-types"
				},
				{
					"include": "#static-attribute"
				},
				{
					"include": "#attributes"
				}
			]
		},

		"scopes_no_selectors": {
			"patterns": [
				{
					"include": "#properties"
				},
				{
					"include": "#scopes_no_selectors_and_properties"
				}
			]
		},

		"scopes": {
			"patterns": [
				{
					"include": "#scopes_no_selectors"
				},
				{
					"include": "#selectors"
				}
			]
		},

		"assignment-no-dynamics": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#data-types"
				},
				{
					"include": "#enum-shorthand"
				},
				{
					"include": "#static-reference"
				},
				{
					"include": "#static-arg"
				},
				{
					"include": "#macro-call"
				}
			]
		},

		"assignment": {
			"patterns": [
				{
					"include": "#assignment-no-dynamics"
				},
				{
					"include": "#attribute-reference"
				}
			]
		},

		"comments": {
			"patterns": [
				{
					"name": "comment.block",
					"begin": "\\-\\-\\[(=*)\\[",
          			"end": "\\]\\1\\]"
				},
				{
					"name": "comment",
					"begin": "\\-\\-",
					"end": "\n"
				}
			]
		},

		"macros": {
			"patterns": [
				{
					"begin": "(@macro)[ \t]*([_a-zA-Z](-?[_a-zA-Z\\d])*)[ \t]*\\(",
					"end": "\\)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control"
						},
						"2": {
							"name": "storage.type"
						}
					},
					"patterns": [
						{
							"include": "#static-arg"
						}
					]
				},
				{
					"match": "(@macro)[ \t]*([_a-zA-Z](-?[_a-zA-Z\\d])*)",
					"captures": {
						"1": {
							"name": "keyword.control"
						},
						"2": {
							"name": "storage.type"
						}
					}
				}
			]
		},

		"macro-call": {
			"patterns": [
				{
					"begin": "(([_a-zA-Z](-?[_a-zA-Z\\d])*)?!)[ \t]*\\(",
					"end": "\\)",
					"beginCaptures": {
						"1": {
							"name": "storage.type"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"match": "(([_a-zA-Z](-?[_a-zA-Z\\d])*)?!)",
					"name": "storage.type"
				}
			]
		},

		"static-arg": {
			"match": "!(([_a-zA-Z](-?[_a-zA-Z\\d])*)?)",
			"name": "storage.type"
		},

		"declarations": {
			"patterns": [
				{
					"begin": "(@(derive|priority|name|macro))",
					"end": ";|}",
					"beginCaptures": {
						"1": {
							"name": "keyword.control"
						}
					},
					
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#data-types"
						},
						{
							"include": "#enum-shorthand"
						},
						{
							"include": "#static-reference"
						},
						{
							"include": "#attribute-reference"
						}
					]
				},

				{
					"patterns": [{
						"match": "(@util)[ \t]([-_A-Za-z\\d\\[\\] \t]+)",
						"captures": {
							"1": {
								"name": "keyword.control"
							},
							"2": {
								"patterns": [ {
									"match": "[^\\[\\]]+",
									"name": "entity.name.tag.css"
								}]
							}
						}
					}, {
						"match": "@(util)?",
						"name": "keyword.control"
					}]
				}
			]
		},

		"selectors": {
			"patterns": [
				{
					"match": "(#|\\.|:|::)([_a-zA-Z](-?[_a-zA-Z\\d])*)?",
					"name": "entity.name.tag.css"
				},
				{
					"match": "(([_a-zA-Z](-?[_a-zA-Z\\d])*))",
					"name": "entity.name.tag.css"
				}
			]
		},

		"tuples": {
			"patterns": [
				{
					"begin": "([a-zA-Z0-9]+)?[ \t]*\\(",
					"end": "\\)",
					"beginCaptures": {
						"1": {
							"name": "support.class"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},

		"booleans": {
			"patterns": [
				{
					"match": "true",
					"name": "variable.other.constant"
				},
				{
					"match": "false",
					"name": "variable.other.constant"
				}
			]
		},

		"nil": {
			"patterns": [
				{
					"match": "nil",
					"name": "variable.other.constant"
				}
			]
		},

		"strings": {
			"patterns": [
				{
					"name": "string",
					"begin": "\\[(=*)\\[",
          			"end": "\\]\\1\\]",
					"patterns": [
						{ 
							"name": "constant.character.escape",
                 			"match": "\\\\"
            			}
					]
				},
				
				{
					"name": "string",
					"begin": "`",
					"end": "`",
					"patterns": [
						{
							"include": "#string_interpolated"
						},
						{
							"include": "#string_escape"
						}
					]
				},

				{
					"name": "string",
					"match": "\"([^\"]*)\"",
					"captures": {
						"1": {
							"patterns": [
								{ 
									"name": "constant.character.escape",
									"match": "\\\\"
								}
							]
						}
					}
				},
				{
					"name": "string",
					"match": "'([^']*)'",
					"captures": {
						"1": {
							"patterns": [
								{ 
									"name": "constant.character.escape",
									"match": "\\\\"
								}
							]
						}
					}
				},
				{
					"name": "string",
					"match": "(\"|')([^\\1]*)",
					"captures": {
						"1": {
							"patterns": [
								{ 
									"name": "constant.character.escape",
									"match": "\\\\"
								}
							]
						}
					}
				}
			]
		},
		"string_interpolated": {
     		"name": "meta.template.expression.luau",
      		"begin": "\\{",
      		"end": "\\}",
      		"patterns": [
        		{
          			"include": "#scopes_no_selectors"
        		}
      		]
		},

		"numbers": {
			"patterns": [
				{
					"match": "(\\d[\\d_]*)?\\.((\\d[\\d_]*)(px|%)?)",
					"captures": {
						"1": {
							"name": "constant.numeric"
						},
						"2": {
							"name": "constant.numeric"
						}
					}
				},
				{
					"name": "constant.numeric",
					"match": "\\d[\\d_]*(px|%)?"
				}
			]
		},

		"colors": {
			"patterns": [
				{
					"match": "(#)(?:[0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})\\b",
					"name": "string"
				},
				{
					"name": "string",
					"match": "(?i)(tw:(slate|gray|zinc|neutral|stone|red|orange|amber|yellow|lime|green|emerald|teal|cyan|sky|blue|indigo|violet|purple|fuchsia|pink|rose)(:(950|900|800|700|600|500|400|300|200|100|50))?)"
				},
				{
					"name": "string",
					"match": "(?i)(skin:(rose|peach|gold|olive)(:(950|900|800|700|600|500|400|300|200|100|50))?)"
				},
				{
					"name": "string",
					"match": "(?i)css:(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|goldenrod|gold|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavenderblush|lavender|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)"
				},
				{
					"name": "string",
					"match": "(?i)bc:(white|grey|lightyellow|brickyellow|lightgreen|lightreddishviolet|pastelblue|lightorangebrown|nougat|brightred|medreddishviolet|brightblue|brightyellow|earthorange|black|darkgrey|darkgreen|mediumgreen|ligyellowichorange|brightgreen|darkorange|lightbluishviolet|transparent|trred|trlgblue|trblue|tryellow|lightblue|trflureddishorange|trgreen|trflugreen|phosphwhite|lightred|mediumred|mediumblue|lightgrey|brightviolet|bryellowishorange|brightorange|brightbluishgreen|earthyellow|brightbluishviolet|trbrown|mediumbluishviolet|trmedireddishviolet|medyellowishgreen|medbluishgreen|lightbluishgreen|bryellowishgreen|ligyellowishgreen|medyellowishorange|brreddishorange|brightreddishviolet|lightorange|trbrightbluishviolet|darknougat|silver|neonorange|neongreen|sandblue|sandviolet|mediumorange|sandyellow|earthblue|earthgreen|trflublue|sandbluemetallic|sandvioletmetallic|sandyellowmetallic|darkgreymetallic|blackmetallic|lightgreymetallic|sandgreen|sandred|darkred|trfluyellow|trflured|gunmetallic|redflipflop|yellowflipflop|silverflipflop|curry|fireyellow|flameyellowishorange|reddishbrown|flamereddishorange|mediumstonegrey|royalblue|darkroyalblue|brightreddishlilac|darkstonegrey|lemonmetalic|lightstonegrey|darkcurry|fadedgreen|turquoise|lightroyalblue|mediumroyalblue|brown|reddishlilac|lightlilac|brightpurple|lightpurple|lightpink|lightbrickyellow|warmyellowishorange|coolyellow|doveblue|mediumlilac|slimegreen|smokygrey|darkblue|parsleygreen|steelblue|stormblue|lapis|darkindigo|seagreen|shamrock|fossil|mulberry|forestgreen|cadetblue|electricblue|eggplant|moss|artichoke|sagegreen|ghostgrey|lilac|plum|olivine|laurelgreen|quillgrey|crimson|mint|babyblue|carnationpink|persimmon|maroon|gold|daisyorange|pearl|fog|salmon|terracotta|cocoa|wheat|buttermilk|mauve|sunrise|tawny|rust|cashmere|khaki|lilywhite|seashell|burgundy|cork|burlap|beige|oyster|pinecone|fawnbrown|hurricanegrey|cloudygrey|linen|copper|mediumbrown|bronze|flint|darktaupe|burntsienna|institutionalwhite|midgray|reallyblack|reallyred|deeporange|alder|dustyrose|olive|newyeller|reallyblue|navyblue|deepblue|cyan|cgabrown|magenta|pink|teal|toothpaste|limegreen|camo|grime|lavender|pastellightblue|pastelorange|pastelviolet|pastelbluegreen|pastelgreen|pastelyellow|pastelbrown|royalpurple|hotpink)"
				}
			]
		},

		"asset_urls": {
			"patterns": [
				{
					"match": "rbxassetid://[0-9]*",
					"name": "string"
				},

				{
					"match": "(rbxasset|rbxthumb|rbxgameasset|rbxhttp|rbxtemp|http|https)://([^) ]*)",
					"name": "string"
				}
			]
		},

		"attributes": {
			"begin": "(\\$([_a-zA-Z](-?[_a-zA-Z\\d])*)?)([ \t]*)(=?)",
			"end": ";|}|$",
			"beginCaptures": {
				"1": {
					"name": "variable.other.constant"
				}
			},
			
			"patterns": [
				{
					"include": "#assignment"
				}
			]
		},
		"attribute-reference": {
			"match": "\\$([_a-zA-Z][_A-Za-z0-9]*)?",
			"name": "variable.other.constant"
		},

		"static-attribute": {
			"begin": "(\\$!([_a-zA-Z](-?[_a-zA-Z\\d])*)?)([ \t]*)(=?)",
			"end": ";|}|$",
			"beginCaptures": {
				"1": {
					"name": "storage.type"
				}
			},
			
			"patterns": [
				{
					"include": "#assignment-no-dynamics"
				}
			]
		},
		"static-reference": {
			"match": "\\$!([_a-zA-Z][_A-Za-z0-9]*)?",
			"name": "storage.type"
		},

		"enums": {
			"match": "(Enum)(((:|\\.)[a-zA-Z0-9]+)+)?",
			"captures": {
				"1": {
					"name": "entity.name.type.enum"
				},
				"2": {
					"patterns": [
						{
							"match": "[a-zA-Z0-9]+",
							"name": "entity.name.type.enum"
						}
					]
				}
			}
		},

		"enum-shorthand": {
			"match": ":([a-zA-Z0-9]+)",
			"captures": {
				"1": {
					"name": "entity.name.type.enum"
				}
			}
		},

		"properties": {
			"begin": "([_a-zA-Z](-?[_a-zA-Z\\d])*)([ \t]*)*=",
			"end": ";|}|$",
			"beginCaptures": {
				"1": {
					"name": "variable.name"
				}
			},
			
			"patterns": [
				{
					"include": "#assignment"
				}
			]
		}
	},
	"scopeName": "source.rsml"
}